#!/usr/bin/env php
<?php
/*
|--------------------------------------------------------------------------
| Simple CLI
|--------------------------------------------------------------------------
|
| This command-line interface (short: "CLI") can be used to
| have easier control over all important tasks necessary.
|
| For example: editing the config, restoring the default config
| in case of issues, starting the local dev server, ...
|
*/

// Definitions

$CONFIG_DIR = "./resources/config";
$LOGS_DIR = "." . getPath("logs");
$CACHE_DIR = "." . getPath("cache");

// Main

if ($argc < 2) {
    exit("Usage: quicky-cli <command> [<args>]\n");
}

$command = $argv[1];

switch ($command) {
    case 'start':
        $address = $argv[2] ?? 'localhost';
        $port = $argv[3] ?? '8080';
        startServer($address, $port);
        break;
    case 'clear':
        $subCommand = $argv[2] ?? '';
        clear($subCommand);
        break;
    case 'config':
        $subCommand = $argv[2] ?? '';
        $field = $argv[3] ?? '';
        $value = $argv[4] ?? '';
        config($subCommand, $field, $value);
        break;
    case 'debug':
        debug($command);
        break;
    default:
        exit("Unknown command: $command\n");
}
exit("Terminated without errors.");

// Selectors

function clear($subCommand)
{
    global $CACHE_DIR, $LOGS_DIR;

    switch ($subCommand) {
        case 'cache':
            echo "Clearing cache...\n";
            deleteFiles($CACHE_DIR);
            break;
        case 'logs':
            echo "Clearing logs...\n";
            deleteFiles($LOGS_DIR);
            break;
        default:
            exit("Missing or unknown argument: clear $subCommand\n");
    }
}

function config($subCommand, $field, $value)
{
    switch ($subCommand) {
        case 'restore':
            echo "Restoring config...\n";
            restoreConfig();
            break;
        case 'set':
            if (empty($field) || empty($value)) {
                exit("Missing field or value for 'set' command.\n");
            }
            echo "Setting config field: $field = $value\n";
            updateConfig($field, $value);
            break;
        default:
            exit("Missing or unknown argument: config $subCommand\n");
    }
}

// Helpers

function debug($command): void
{
    global $CONFIG_DIR, $LOGS_DIR, $CACHE_DIR, $argc, $argv;

    echo "cmd: $command\n";
    echo "argc: $argc\n";
    echo "argv: " . json_encode($argv) . "\n";
    echo "config path: $CONFIG_DIR\n";
    echo "logs path: $LOGS_DIR\n";
    echo "cache path: $CACHE_DIR\n";
    echo "verifying... config (" . is_dir($CONFIG_DIR) . "), logs ("
        . is_dir($LOGS_DIR) . "), cache (" . is_dir($CACHE_DIR) . ")\n";
    echo "default.json is present: " .  is_file($CONFIG_DIR . "/default.json") . "\n";
}

function getPath($of): string
{
    global $CONFIG_DIR;

    $configFile = $CONFIG_DIR . "/config.json";
    $configData = file_get_contents($configFile);
    $configArray = json_decode($configData, true);

    switch ($of) {
        case 'logs':
            return $configArray['logs'];
        default:
        case 'cache':
            return $configArray['cache']['path'];
    }
}

function startServer($address, $port)
{
    echo "Starting PHP Development Server at $address:$port...\n";
    exec("cd ./public && php -S $address:$port");
}

function updateConfig($field, $value)
{
    global $CONFIG_DIR;

    $configFile = $CONFIG_DIR . "/config.json";
    $configData = file_get_contents($configFile);

    $configArray = json_decode($configData, true);
    setConfigField($configArray, $field, $value);

    $configData = json_encode($configArray, JSON_PRETTY_PRINT);
    if (!file_put_contents($configFile, $configData)) {
        exit("FATAL: Could not override configuration file!");
    }
}

function setConfigField(&$array, $field, $value)
{
    $keys = explode('.', $field);

    foreach ($keys as $key) {
        if (!isset($array[$key])) {
            $array[$key] = [];
        }

        $array = &$array[$key];
    }

    $array = $value;
}

function restoreConfig()
{
    global $CONFIG_DIR;

    $configFile = $CONFIG_DIR . "/config.json";
    $defaultFile = $CONFIG_DIR . "/default.json";

    if (is_file($configFile) && is_file($defaultFile)) {
        if (!unlink($configFile)) {
            exit("FATAL: Could not delete $configFile");
        }

        if (!copy($defaultFile, $configFile)) {
            exit("FATAL: Could not restore configuration file. Please check file permissions.");
        }
    }
}

function deleteFiles($folder)
{
    if (is_dir($folder)) {
        $files = scandir($folder);

        foreach ($files as $file) {
            if ($file === ".gitkeep") continue;

            if (is_file($folder . "/" . $file)) {
                if (unlink($folder . "/" . $file)) {
                    echo "Deleted $file\n";
                } else {
                    echo "FATAL: Can not delete $file\n";
                }
            }
        }
    } else {
        echo "Unknown directory\n";
    }
}
