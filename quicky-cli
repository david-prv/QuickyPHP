#!/usr/bin/env php
<?php

// Definitions

$CONFIG_DIR = "./resources/config";
$LOGS_DIR = "." . getPath("logs");
$CACHE_DIR = "." . getPath("cache");

echo $CONFIG_DIR . "\n";
echo $LOGS_DIR . "\n";
echo $CACHE_DIR . "\n";

// Main

if ($argc < 2) {
    exit("Usage: quicky-cli <command> [<args>]\n");
}

$command = $argv[1];

switch ($command) {
    case 'start':
        $address = isset($argv[2]) ? $argv[2] : 'localhost';
        $port = isset($argv[3]) ? $argv[3] : '8080';
        startServer($address, $port);
        break;
    case 'clear':
        $subCommand = isset($argv[2]) ? $argv[2] : '';
        clear($subCommand);
        break;
    case 'config':
        $subCommand = isset($argv[2]) ? $argv[2] : '';
        $field = isset($argv[3]) ? $argv[3] : '';
        $value = isset($argv[4]) ? $argv[4] : '';
        config($subCommand, $field, $value);
        break;
    default:
        exit("Unknown command: $command\n");
}
exit("Terminated without errors.");

// Selectors

function clear($subCommand) {
    global $CACHE_DIR, $LOGS_DIR;

    switch ($subCommand) {
        case 'cache':
            echo "Clearing cache...\n";
            deleteFiles($CACHE_DIR);
            break;
        case 'logs':
            echo "Clearing logs...\n";
            deleteFiles($LOGS_DIR);
            break;
        default:
            exit("Missing or unknown argument: clear $subCommand\n");
    }
}

function config($subCommand, $field, $value) {
    switch ($subCommand) {
        case 'restore':
            echo "Restoring config...\n";
            restoreConfig();
            break;
        case 'set':
            if (empty($field) || empty($value)) {
                exit("Missing field or value for 'set' command.\n");
            }
            echo "Setting config field: $field = $value\n";
            updateConfig($field, $value);
            break;
        default:
            exit("Missing or unknown argument: config $subCommand\n");
    }
}

// Helpers

function getPath($of): string {
    global $CONFIG_DIR;

    $configFile = $CONFIG_DIR . "/config.json";
    $configData = file_get_contents($configFile);
    $configArray = json_decode($configData, true);

    switch ($of) {
        case 'logs':
            return $configArray['logs'];
            break;
        case 'cache':
            return $configArray['cache']['path'];
        default:
            break;
    }
}

function startServer($address, $port) {
    echo "Starting PHP Development Server at $address:$port...\n";
    exec("cd ./public && php -S $address:$port");
}

function updateConfig($field, $value) {
    global $CONFIG_DIR;

    $configFile = $CONFIG_DIR . "/config.json";
    $configData = file_get_contents($configFile);

    $configArray = json_decode($configData, true);
    setConfigField($configArray, $field, $value);

    $configData = json_encode($configArray, JSON_PRETTY_PRINT);
    if (!file_put_contents($configFile, $configData)) {
        exit("FATAL: Could not override configuration file!");
    }
}

function setConfigField(&$array, $field, $value) {
    $keys = explode('.', $field);

    foreach ($keys as $key) {
        if (!isset($array[$key])) {
            $array[$key] = [];
        }

        $array = &$array[$key];
    }

    $array = $value;
}

function restoreConfig() {
    global $CONFIG_DIR;

    $configFile = $CONFIG_DIR . "/config.json";
    $defaultFile = $CONFIG_DIR . "/default.json";

    if (is_file($configFile) && is_file($defaultFile)) {
        if (!unlink($configFile)) {
            exit("FATAL: Could not delete $configFile");
        }

        if (!copy($defaultFile, $configFile)) {
            exit("FATAL: Could not restore configuration file. Please check file permissions.");
        }
    }
}

function deleteFiles($folder) {
    if (is_dir($folder)) {
        $files = scandir($folder);

        foreach ($files as $file) {
            if ($file === ".gitkeep") continue;

            if (is_file($folder . "/" . $file)) {
                if (unlink($folder . "/" . $file)) {
                    echo "Deleted $file\n";
                } else {
                    echo "FATAL: Can not delete $file\n";
                }
            }
        }
    } else {
        echo "Unknown directory\n";
    }
}
